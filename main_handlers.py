# main_handlers.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import logging
import json
import os
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import FSInputFile
from keyboard import get_start_keyboard
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from constants import ADDRESS_BUTTON_TEXT, PROMOTION_BUTTON_TEXT

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏ ---
ADS_DIR = "ads"
PROMOTIONS_FILE = os.path.join(ADS_DIR, "promotions.json")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
        "–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ 'MobiAs'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_start_keyboard()
    )

@router.message(F.text == ADDRESS_BUTTON_TEXT)
async def show_shop_addresses(message: types.Message):
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses)

@router.message(F.text == PROMOTION_BUTTON_TEXT)
async def handle_promotions(message: types.Message, bot: Bot):
    # ... –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    try:
        if not os.path.exists(PROMOTIONS_FILE):
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        with open(PROMOTIONS_FILE, "r", encoding="utf-8") as f:
            ads_data = json.load(f)
        if not ads_data:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        for ad in ads_data:
            text = ad.get("text", "")
            image_path = os.path.join(ADS_DIR, ad.get("image", ""))
            if os.path.exists(image_path):
                await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile(image_path), caption=text)
            else:
                await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π.")

@router.callback_query(F.data == "open_main")
async def process_open_main(callback: types.CallbackQuery):
    if callback.message.reply_markup:
        await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard())
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –û–¢–°–Æ–î–ê –£–î–ê–õ–ï–ù! =====