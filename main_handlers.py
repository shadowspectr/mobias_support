# main_handlers.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import logging
import json
import os
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import FSInputFile
from keyboard import get_start_keyboard
from support_handler import SUPPORT_TICKETS_CHAT_ID
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from constants import ADDRESS_BUTTON_TEXT, PROMOTION_BUTTON_TEXT

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏ ---
ADS_DIR = "ads"
PROMOTIONS_FILE = os.path.join(ADS_DIR, "promotions.json")


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
        "–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ 'MobiAs'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_start_keyboard()
    )

@router.message(F.text == ADDRESS_BUTTON_TEXT)
async def show_shop_addresses(message: types.Message):
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏" ---
@router.message(F.text == PROMOTION_BUTTON_TEXT)
async def handle_promotions(message: types.Message, bot: Bot):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏
        if not os.path.exists(PROMOTIONS_FILE):
            logging.warning(f"–§–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {PROMOTIONS_FILE}")
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return

        with open(PROMOTIONS_FILE, "r", encoding="utf-8") as f:
            ads_data = json.load(f)

        if not ads_data:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for ad in ads_data:
            text = ad.get("text", "–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            image_filename = ad.get("image")
            
            if image_filename:
                image_path = os.path.join(ADS_DIR, image_filename)
                if os.path.exists(image_path):
                    photo = FSInputFile(image_path)
                    await bot.send_photo(
                        chat_id=message.chat.id,
                        photo=photo,
                        caption=text
                    )
                else:
                    logging.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                    await message.answer(text) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å
            else:
                # –ï—Å–ª–∏ –≤ JSON –Ω–µ—Ç –∫–ª—é—á–∞ "image", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(text)

    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ: {PROMOTIONS_FILE}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")


@router.callback_query(F.data == "open_main")
async def process_open_main(callback: types.CallbackQuery):
    if callback.message.reply_markup:
        await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

# --- Fallback Handler ---
@router.message(lambda message: message.chat.id != SUPPORT_TICKETS_CHAT_ID)
async def fallback_handler(message: types.Message):
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {message.text or '[–Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}")
    await message.answer(
        "ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.",
        reply_markup=get_start_keyboard()
    )