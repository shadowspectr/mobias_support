# main.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardRemove
from dotenv import load_dotenv

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from keyboard import get_start_keyboard
from support_handler import router as support_router
from src.broadcast import send_random_ad # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —É –≤–∞—Å –µ—Å—Ç—å
import keep_alive # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —É –≤–∞—Å –µ—Å—Ç—å

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv('API_KEY')
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
# –í–∞–∂–Ω–æ! –†–æ—É—Ç–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª
# —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM.
dp.include_router(support_router)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
        "–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ 'MobiAs'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_start_keyboard()
    )

@dp.message(F.text == "üè¨ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
async def show_shop_addresses(message: types.Message):
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses)

@dp.message(F.text == "üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏")
async def handle_promotions(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ü–∏–π
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    # await send_random_ad(bot) # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ–º
    # await send_ad_to_user(bot, message.from_user.id) # –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

@dp.callback_query(F.data == "open_main")
async def process_open_main(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

# --- Fallback Handler (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) ---
@dp.message()
async def fallback_handler(message: types.Message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    # (–≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –≤ support_router) –Ω–µ –ø–æ–π–º–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(
        "ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.",
        reply_markup=get_start_keyboard()
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def on_startup(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    try:
        if 'keep_alive' in globals():
            keep_alive.keep_alive()
            logging.info("Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())