import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, Message
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv
from keyboard import get_start_keyboard
from aiogram.types import ReplyKeyboardRemove
from callback_handler import callback_router
from middlewares.log_user import UserLoggingMiddleware
import pandas as pd
from geopy.distance import geodesic
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import keep_alive
from support_handler import callback_router as support_router
from partner_handler import partner_router
from src.broadcast import send_random_ad
from src.broadcast import send_ad_to_user

load_dotenv()

BOT_TOKEN = os.getenv('API_KEY')
USER_IDS_FILE = "user_ids.txt"

def load_user_ids():
    try:
        if not os.path.exists(USER_IDS_FILE):
            with open(USER_IDS_FILE, "w") as f:
                pass
            logging.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª user_ids.txt")
            return set()
        with open(USER_IDS_FILE, "r") as file:
            return set(line.strip() for line in file if line.strip().isdigit())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ user_ids.txt: {e}")
        return set()

def save_user_id(user_id: int):
    try:
        user_ids = load_user_ids()
        if str(user_id) not in user_ids:
            with open(USER_IDS_FILE, "a") as file:
                file.write(f"{user_id}\n")
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π user_id: {user_id}")
        else:
            logging.info(f"user_id {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_id {user_id}: {e}")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

dp.message.middleware(UserLoggingMiddleware())
dp.callback_query.middleware(UserLoggingMiddleware())
dp.include_router(partner_router)
dp.include_router(callback_router)
dp.include_router(support_router)  # –†–æ—É—Ç–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω
df = pd.read_excel('map.xlsx')
router = Router()

# ID —á–∞—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–≥—Ä—É–ø–ø–∞, –Ω–µ –¥–∏–∞–ª–æ–≥)
SUPPORT_TICKETS_CHAT_ID = -4961897884

KNOWN_BUTTON_TEXTS = {
    "üì¶ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–æ–π?",
    "‚ÑπÔ∏è –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?", 
    "‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏?",
    "üìç –ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏",
    "‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
    "üè¨ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤",
    "üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏"
}

# –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ support_handler.py

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user_id(message.from_user.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ü—Ä–∏–≤–µ—Ç - –ø—Ä–∏–≤–µ—Ç üëã \n"
                         "–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ 'MobiAs'! \n"
                         "–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å!",
                         reply_markup=get_start_keyboard(), parse_mode="HTML")

@dp.message(Command("list"))
async def list_user_ids(message: types.Message):
    user_ids = load_user_ids()
    if not user_ids:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(user_ids))

@dp.message(Command("broadcast"))
async def broadcast_ads(message: types.Message):
    await message.answer("–†–∞—Å—Å—ã–ª–∞—é —Ä–µ–∫–ª–∞–º—É...")
    await send_random_ad(bot)

@dp.message(F.text == "üè¨ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
async def show_shop_addresses(message: types.Message):
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses, parse_mode="HTML")

@dp.message(F.text == "üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏")
async def handle_promotions(message: types.Message, bot: Bot):
    await send_ad_to_user(bot, message.from_user.id)

@dp.callback_query(lambda c: c.data == "open_main")
async def process_open_main(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...", reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç +7–î–æ—Å—Ç–∞–≤–∫–∏. –†–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å "
        "<a href='https://www.ozon.ru/'>—Ç–æ–ø–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –†–§</a>.",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É" - —Ç–µ–ø–µ—Ä—å –≤ support_handler.py

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
async def delete_webhook():
    try:
        await bot.delete_webhook()
        logging.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤
def get_nearby_locations(user_location, max_distance_km=2):
    nearby_locations = []
    priority_location = "–î–æ–Ω–µ—Ü–∫, –ø–ª. –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏, –¥.4"

    for index, row in df.iterrows():
        location = (row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞'])
        distance = geodesic(user_location, location).kilometers
        if distance <= max_distance_km:
            is_priority = row['–∞–¥—Ä–µ—Å'] == priority_location
            nearby_locations.append((row['–∞–¥—Ä–µ—Å'], distance, row['—Å—Å—ã–ª–∫–∞'], row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞'], is_priority))

    return sorted(nearby_locations, key=lambda x: (not x[5], x[1]))

@dp.message(F.content_type == ContentType.LOCATION)
async def handle_location(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è: {message.location.latitude}, {message.location.longitude}")
    user_location = (message.location.latitude, message.location.longitude)
    nearby_locations = get_nearby_locations(user_location)

    if nearby_locations:
        response = "<b>–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏:</b>\n\n"
        for address, distance, link, lat, lon, is_priority in nearby_locations:
            yandex_maps_url = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16&mode=search&text={address}"
            response += f"üìç <b>{address}</b> - {distance:.2f} –∫–º\n"
            response += f"üîó <a href='{link}'>–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ Ozon</a>\n"
            response += f"üó∫Ô∏è <a href='{yandex_maps_url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n\n"
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–º –Ω–µ—Ç —Ç–æ—á–µ–∫."

    await message.reply(response, parse_mode="HTML")

# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã)
@dp.message(lambda message: (
    message.chat.id != SUPPORT_TICKETS_CHAT_ID and 
    message.chat.type == "private" and
    message.from_user.id not in [info.get('support_user_id') for info in getattr(support_router, 'active_dialogs', {}).values()]
))
async def fallback_handler(message: types.Message, bot: Bot):
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if message.text and message.text.strip() in KNOWN_BUTTON_TEXTS:
        return

    # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –±–æ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
    await message.answer(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π '‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.",
        reply_markup=get_start_keyboard()
    )

dp.include_router(router)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await delete_webhook()
    try:
        await dp.start_polling(bot)
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    keep_alive.keep_alive()
    asyncio.run(main())