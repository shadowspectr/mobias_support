import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, Message
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv
from keyboard import get_start_keyboard
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardRemove
from callback_handler import callback_router
import pandas as pd
from geopy.distance import geodesic
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import keep_alive
from support_handler import callback_router as support_router
from partner_handler import partner_router


load_dotenv()

BOT_TOKEN = os.getenv('API_KEY')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(partner_router)
dp.include_router(callback_router)
dp.include_router(support_router)
df = pd.read_excel('map.xlsx')
router = Router()

# ID —á–∞—Ç–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
SUPPORT_CHAT_ID =-1002837608854


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportState(StatesGroup):
    waiting_for_question = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ü—Ä–∏–≤–µ—Ç - –ø—Ä–∏–≤–µ—Ç üëã "
                         "–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ —É –Ω–∞—Å üí¨"
                         "<b>–û—á–µ–Ω—å —Å–∫–æ—Ä–æ</b> —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!",
                         reply_markup=get_start_keyboard(), parse_mode="HTML")


@dp.callback_query(lambda c: c.data == "open_main")
async def process_open_main(callback: types.CallbackQuery):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    await callback.message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...", reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç +7–î–æ—Å—Ç–∞–≤–∫–∏. –†–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å "
        "<a href='https://www.ozon.ru/'>—Ç–æ–ø–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –†–§</a>.",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML"
    )


# Callback –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.callback_query(lambda c: c.data == "support")
async def support_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üõ† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
    await state.set_state(SupportState.waiting_for_question)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(SupportState.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext, bot: Bot):
    user_question = message.text

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    forward_message = await bot.send_message(
        SUPPORT_CHAT_ID,
        f"üîî –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {message.from_user.id}):\n{user_question}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.update_data(user_chat_id=message.chat.id, support_message_id=forward_message.message_id)

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.chat.id == SUPPORT_CHAT_ID)
async def forward_answer_from_support(message: types.Message, bot: Bot):
    if message.reply_to_message:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_info = message.reply_to_message.text.split('\n')[0]
        user_id = int(question_info.split('(ID: ')[1].replace('):', ''))

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
async def delete_webhook():
    try:
        await bot.delete_webhook()
        logging.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤
def get_nearby_locations(user_location, max_distance_km=2):
    nearby_locations = []
    priority_location = "–î–æ–Ω–µ—Ü–∫, –ø–ª. –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏, –¥.4"

    for index, row in df.iterrows():
        location = (row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞'])
        distance = geodesic(user_location, location).kilometers
        if distance <= max_distance_km:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏
            is_priority = row['–∞–¥—Ä–µ—Å'] == priority_location
            nearby_locations.append((row['–∞–¥—Ä–µ—Å'], distance, row['—Å—Å—ã–ª–∫–∞'], row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞'], is_priority))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–≤—ã–º
    return sorted(nearby_locations, key=lambda x: (not x[5], x[1]))


@dp.message(F.content_type == ContentType.LOCATION)
async def handle_location(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è: {message.location.latitude}, {message.location.longitude}")
    user_location = (message.location.latitude, message.location.longitude)
    nearby_locations = get_nearby_locations(user_location)

    if nearby_locations:
        response = "<b>–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏:</b>\n\n"
        for address, distance, link, lat, lon, is_priority in nearby_locations:
            yandex_maps_url = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16&mode=search&text={address}"

            response += f"üìç <b>{address}</b> - {distance:.2f} –∫–º\n"
            response += f"üîó <a href='{link}'>–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ Ozon</a>\n"
            response += f"üó∫Ô∏è <a href='{yandex_maps_url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n\n"
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–º –Ω–µ—Ç —Ç–æ—á–µ–∫."

    await message.reply(response, parse_mode="HTML")



dp.include_router(router)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await delete_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    keep_alive.keep_alive()
    asyncio.run(main())
