# main.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from support_handler import router as support_router, SUPPORT_TICKETS_CHAT_ID
from main_handlers import router as main_handlers_router
from keyboard import get_start_keyboard
import keep_alive

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv('API_KEY')
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_KEY –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –†–û–£–¢–ï–†–û–í ---
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏.
# –ü–æ—Ä—è–¥–æ–∫ —ç—Ç–∏—Ö –¥–≤—É—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–µ–Ω, –Ω–æ —Ç–∞–∫ –ª–æ–≥–∏—á–Ω–µ–µ.
dp.include_router(main_handlers_router)
dp.include_router(support_router)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (FALLBACK) ---
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ü–û–°–õ–ï–î–ù–ò–ú –∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
# –û–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–æ–π–º–∞–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤—ã—à–µ.
@dp.message()
async def fallback_handler(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == SUPPORT_TICKETS_CHAT_ID:
        return
        
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {message.text or '[–Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}")
    await message.answer(
        "ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.",
        reply_markup=get_start_keyboard()
    )


# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ ---
async def on_startup(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    try:
        if 'keep_alive' in globals():
            keep_alive.keep_alive()
        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())