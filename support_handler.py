# support_handler.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import logging
import asyncio
from datetime import datetime
from aiogram import Router, types, Bot, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import get_back_to_menu_keyboard, get_start_keyboard, get_end_dialog_keyboard
# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã =====
from constants import (
    SUPPORT_BUTTON_TEXT, KNOWN_BUTTONS, END_DIALOG_BUTTON_TEXT,
    SUPPORT_TICKETS_CHAT_ID, ADMIN_USER_ID, DIALOG_TIMEOUT_SECONDS,
    ADDRESS_BUTTON_TEXT, PROMOTION_BUTTON_TEXT  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫
)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
SUPPORT_TICKETS_CHAT_ID = -1002837608854
ADMIN_USER_ID = 12345678 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DIALOG_TIMEOUT_SECONDS = 5 * 3600  # 5 —á–∞—Å–æ–≤

# --- –¢–ï–ö–°–¢–´ –ë–´–°–¢–†–´–• –û–¢–í–ï–¢–û–í ---
QUICK_RESPONSE_FIRST = """ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! 

–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ), –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""

QUICK_RESPONSE_SECOND = """‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!

–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class SupportConversation(StatesGroup):
    waiting_for_first_message = State()
    waiting_for_additional_info = State()

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∑–∞–¥–∞—á —Ç–∞–π–º-–∞—É—Ç–∞ ---
active_dialogs = {}
support_to_user_map = {}
timeout_tasks = {} # {user_id: asyncio.Task}

router = Router()

async def _end_dialog(user_id: int, bot: Bot, reason: str = "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω."):
    if user_id not in active_dialogs: return
    support_agent_id = active_dialogs.get(user_id)
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()
        del timeout_tasks[user_id]
    if user_id in active_dialogs: del active_dialogs[user_id]
    if support_agent_id and support_agent_id in support_to_user_map: del support_to_user_map[support_agent_id]
    try:
        await bot.send_message(user_id, f"‚ùóÔ∏è {reason}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
        if support_agent_id: await bot.send_message(support_agent_id, f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        logging.info(f"–î–∏–∞–ª–æ–≥ –¥–ª—è {user_id} –∏ {support_agent_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ {user_id}: {e}")

async def _dialog_timeout_watcher(user_id: int, bot: Bot):
    try:
        await asyncio.sleep(DIALOG_TIMEOUT_SECONDS)
        logging.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º-–∞—É—Ç 5 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ó–∞–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥.")
        await _end_dialog(user_id, bot, reason="–î–∏–∞–ª–æ–≥ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    except asyncio.CancelledError: logging.info(f"–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è {user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è {user_id}: {e}")

@router.message(F.text == SUPPORT_BUTTON_TEXT)
async def start_support_dialog(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in {SupportConversation.waiting_for_first_message, SupportConversation.waiting_for_additional_info}:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if message.from_user.id in active_dialogs:
        await message.answer("–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    await state.clear()
    await message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.", reply_markup=get_back_to_menu_keyboard())
    await state.set_state(SupportConversation.waiting_for_first_message)

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM =====
@router.message(SupportConversation.waiting_for_first_message, F.text == ADDRESS_BUTTON_TEXT)
async def handle_address_in_support_state(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses)
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å

@router.message(SupportConversation.waiting_for_additional_info, F.text == ADDRESS_BUTTON_TEXT)
async def handle_address_in_additional_info_state(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    addresses = (
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 24</b>\n"
        "üè¢ –¢–¶ –ü–∞—Å—Å–∞–∂, –≤—Ö–æ–¥ 2\n"
        "‚è∞ –° 9:00 –¥–æ 17:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, –ü—Ä-—Ç –ë. –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 30</b>\n"
        "‚è∞ –° 9:00 –¥–æ 18:00\n\n"
        "üìç <b>–ì. –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å, —É–ª. –ö–∏—Ä–æ–≤–∞ 94</b>\n"
        "üè¢ –¢–¶ –õ—é–∫—Å, 1-–π —ç—Ç–∞–∂\n"
        "‚è∞ –° 9:00 –¥–æ 18:00"
    )
    await message.answer(addresses)

@router.message(SupportConversation.waiting_for_first_message, F.text == PROMOTION_BUTTON_TEXT)
async def handle_promotions_in_support_state(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    import json
    import os
    from aiogram.types import FSInputFile
    
    # --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏ ---
    ADS_DIR = "ads"
    PROMOTIONS_FILE = os.path.join(ADS_DIR, "promotions.json")
    
    try:
        if not os.path.exists(PROMOTIONS_FILE):
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        with open(PROMOTIONS_FILE, "r", encoding="utf-8") as f:
            ads_data = json.load(f)
        if not ads_data:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        for ad in ads_data:
            text = ad.get("text", "")
            image_path = os.path.join(ADS_DIR, ad.get("image", ""))
            if os.path.exists(image_path):
                await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile(image_path), caption=text)
            else:
                await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π.")

@router.message(SupportConversation.waiting_for_additional_info, F.text == PROMOTION_BUTTON_TEXT)
async def handle_promotions_in_additional_info_state(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    import json
    import os
    from aiogram.types import FSInputFile
    
    # --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏ ---
    ADS_DIR = "ads"
    PROMOTIONS_FILE = os.path.join(ADS_DIR, "promotions.json")
    
    try:
        if not os.path.exists(PROMOTIONS_FILE):
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        with open(PROMOTIONS_FILE, "r", encoding="utf-8") as f:
            ads_data = json.load(f)
        if not ads_data:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        for ad in ads_data:
            text = ad.get("text", "")
            image_path = os.path.join(ADS_DIR, ad.get("image", ""))
            if os.path.exists(image_path):
                await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile(image_path), caption=text)
            else:
                await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π.")

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" =====
@router.message(SupportConversation.waiting_for_first_message, F.text.in_(["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
async def back_to_menu_from_first_message(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard())

@router.message(SupportConversation.waiting_for_additional_info, F.text.in_(["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
async def back_to_menu_from_additional_info(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard())

@router.message(SupportConversation.waiting_for_first_message)
async def process_first_question(message: types.Message, state: FSMContext, bot: Bot):
    user = message.from_user
    ticket_id = f"T-{user.id}-{datetime.now().strftime('%H%M')}"
    await state.update_data(ticket_id=ticket_id)
    ticket_caption = (f"üé´ <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b>\n\nüë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\nüîó <b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüÜî <b>User ID:</b> <code>{user.id}</code>")
    try:
        start_dialog_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"start_dialog:{user.id}:{ticket_id}")]])
        await bot.send_message(SUPPORT_TICKETS_CHAT_ID, ticket_caption, reply_markup=start_dialog_button)
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        await message.answer(QUICK_RESPONSE_FIRST)
        await state.set_state(SupportConversation.waiting_for_additional_info)
        logging.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç #{ticket_id}: {e}")
        await bot.send_message(ADMIN_USER_ID, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è {user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        await state.clear()

@router.message(SupportConversation.waiting_for_additional_info, lambda message: message.text not in KNOWN_BUTTONS)
async def process_additional_info(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data.get('ticket_id', 'N/A')
    try:
        await bot.send_message(SUPPORT_TICKETS_CHAT_ID, f"üìé <b>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Ç–∏–∫–µ—Ç—É #{ticket_id}</b>")
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        await message.answer(QUICK_RESPONSE_SECOND)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ç—É {ticket_id}.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}: {e}")
        await bot.send_message(ADMIN_USER_ID, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–ø. –∏–Ω—Ñ–æ –¥–ª—è {ticket_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

@router.callback_query(F.data.startswith("start_dialog:"))
async def handle_start_dialog(callback: types.CallbackQuery, bot: Bot, dispatcher: Dispatcher):
    _, user_id_str, ticket_id = callback.data.split(":")
    user_id = int(user_id_str)
    support_agent = callback.from_user
    if user_id in active_dialogs:
        await callback.answer("–î—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.", show_alert=True)
        return
    if support_agent.id in support_to_user_map:
        await callback.answer("–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /end.", show_alert=True)
        return
    user_state: FSMContext = dispatcher.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)
    await user_state.clear()
    active_dialogs[user_id] = support_agent.id
    support_to_user_map[support_agent.id] = user_id
    task = asyncio.create_task(_dialog_timeout_watcher(user_id, bot))
    timeout_tasks[user_id] = task
    logging.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    await callback.message.edit_text(f"{callback.message.html_text}\n\n‚úÖ <b>–í —Ä–∞–±–æ—Ç–µ —É:</b> {support_agent.full_name} (@{support_agent.username or ''})", reply_markup=None)
    await bot.send_message(user_id, "üë®‚Äçüíº –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤—Å–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å.", reply_markup=get_end_dialog_keyboard())
    await bot.send_message(support_agent.id, f"–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}.\n–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É.\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /end")
    await callback.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")

@router.message(F.text == END_DIALOG_BUTTON_TEXT)
async def user_ends_dialog(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    if user_id not in active_dialogs:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.", reply_markup=get_start_keyboard())
        return
    await _end_dialog(user_id, bot, reason="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

@router.message(lambda message: (message.from_user.id in active_dialogs or message.from_user.id in support_to_user_map) and message.chat.id != SUPPORT_TICKETS_CHAT_ID)
async def message_relay(message: types.Message, bot: Bot):
    sender_id = message.from_user.id
    if sender_id in active_dialogs:
        if message.text and message.text.lower().startswith('/end'):
            await _end_dialog(sender_id, bot, reason="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return
        if sender_id in timeout_tasks: timeout_tasks[sender_id].cancel()
        task = asyncio.create_task(_dialog_timeout_watcher(sender_id, bot))
        timeout_tasks[sender_id] = task
        logging.info(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}. –¢–∞–π–º–µ—Ä —Ç–∞–π–º-–∞—É—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        recipient_id = active_dialogs[sender_id]
        try: await message.copy_to(chat_id=recipient_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({sender_id}) —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ({recipient_id}): {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        return
    elif sender_id in support_to_user_map:
        user_id = support_to_user_map[sender_id]
        if message.text and message.text.lower().startswith('/end'):
            await _end_dialog(user_id, bot, reason="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
            return
        try: await message.copy_to(chat_id=user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ({sender_id}) –∫–ª–∏–µ–Ω—Ç—É ({user_id}): {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.")
        return