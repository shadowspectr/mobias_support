# support_handler.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import logging
from datetime import datetime
from aiogram import Router, types, Bot, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import get_back_to_menu_keyboard, get_start_keyboard

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
SUPPORT_TICKETS_CHAT_ID = -4961897884
ADMIN_USER_ID = 12345678 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# --- –¢–ï–ö–°–¢–´ –ë–´–°–¢–†–´–• –û–¢–í–ï–¢–û–í ---
QUICK_RESPONSE_FIRST = """ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! 

–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ), –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""

QUICK_RESPONSE_SECOND = """‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!

–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class SupportConversation(StatesGroup):
    waiting_for_first_message = State()
    waiting_for_additional_info = State()

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ ---
active_dialogs = {}
support_to_user_map = {}

router = Router()


# 1. –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê
@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def start_support_dialog(message: types.Message, state: FSMContext):
    if message.from_user.id in active_dialogs:
        await message.answer("–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    await state.clear()
    await message.answer(
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(SupportConversation.waiting_for_first_message)


# 2. –ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ö–õ–ò–ï–ù–¢–ê
@router.message(SupportConversation.waiting_for_first_message)
async def process_first_question(message: types.Message, state: FSMContext, bot: Bot):
    user = message.from_user
    ticket_id = f"T-{user.id}-{datetime.now().strftime('%H%M')}"
    await state.update_data(ticket_id=ticket_id)

    ticket_caption = (
        f"üé´ <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\n"
        f"üîó <b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî <b>User ID:</b> <code>{user.id}</code>"
    )
    try:
        start_dialog_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                callback_data=f"start_dialog:{user.id}:{ticket_id}"
            )]
        ])
        await bot.send_message(
            SUPPORT_TICKETS_CHAT_ID, 
            ticket_caption,
            reply_markup=start_dialog_button
        )
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        await message.answer(QUICK_RESPONSE_FIRST)
        await state.set_state(SupportConversation.waiting_for_additional_info)
        logging.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç #{ticket_id}: {e}")
        await bot.send_message(ADMIN_USER_ID, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è {user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# 3. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢ –ö–õ–ò–ï–ù–¢–ê
@router.message(SupportConversation.waiting_for_additional_info)
async def process_additional_info(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data.get('ticket_id', 'N/A')
    try:
        await bot.send_message(
            SUPPORT_TICKETS_CHAT_ID,
            f"üìé <b>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Ç–∏–∫–µ—Ç—É #{ticket_id}</b>"
        )
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        await message.answer(QUICK_RESPONSE_SECOND)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ç—É {ticket_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}: {e}")
        await bot.send_message(ADMIN_USER_ID, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–ø. –∏–Ω—Ñ–æ –¥–ª—è {ticket_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É.")


# 4. –°–û–¢–†–£–î–ù–ò–ö –ù–ê–ß–ò–ù–ê–ï–¢ –î–ò–ê–õ–û–ì
@router.callback_query(F.data.startswith("start_dialog:"))
async def handle_start_dialog(callback: types.CallbackQuery, bot: Bot, dispatcher: Dispatcher):
    _, user_id_str, ticket_id = callback.data.split(":")
    user_id = int(user_id_str)
    support_agent = callback.from_user

    if user_id in active_dialogs:
        await callback.answer("–î—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.", show_alert=True)
        return
    if support_agent.id in support_to_user_map:
        await callback.answer("–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /end.", show_alert=True)
        return

    user_state: FSMContext = dispatcher.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)
    await user_state.clear()
    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥.")

    active_dialogs[user_id] = support_agent.id
    support_to_user_map[support_agent.id] = user_id
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: –ö–ª–∏–µ–Ω—Ç {user_id} <-> –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {support_agent.id} (–¢–∏–∫–µ—Ç {ticket_id})")
    
    await callback.message.edit_text(
        f"{callback.message.html_text}\n\n"
        f"‚úÖ <b>–í —Ä–∞–±–æ—Ç–µ —É:</b> {support_agent.full_name} (@{support_agent.username or ''})",
        reply_markup=None
    )
    
    await bot.send_message(
        user_id,
        "üë®‚Äçüíº –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤—Å–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å."
    )
    await bot.send_message(
        support_agent.id,
        f"–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}.\n"
        f"–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É.\n"
        f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /end"
    )
    await callback.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")


# 5. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–ï–†–ï–°–´–õ–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
@router.message(
    lambda message: (
        message.from_user.id in active_dialogs or message.from_user.id in support_to_user_map
    ) and message.chat.id != SUPPORT_TICKETS_CHAT_ID
)
async def message_relay(message: types.Message, bot: Bot):
    sender_id = message.from_user.id
    if sender_id in active_dialogs:
        recipient_id = active_dialogs[sender_id]
        try:
            await message.copy_to(chat_id=recipient_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({sender_id}) —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ({recipient_id}): {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    elif sender_id in support_to_user_map:
        recipient_id = support_to_user_map[sender_id]
        if message.text and message.text.lower().startswith('/end'):
            logging.info(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {sender_id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {recipient_id}.")
            del active_dialogs[recipient_id]
            del support_to_user_map[sender_id]
            await bot.send_message(recipient_id, "–î–∏–∞–ª–æ–≥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!", reply_markup=get_start_keyboard())
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥. –ß—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É.")
            return
        try:
            await message.copy_to(chat_id=recipient_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ({sender_id}) –∫–ª–∏–µ–Ω—Ç—É ({recipient_id}): {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return