from aiogram import Router, types, Bot, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import asyncio
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class SupportState(StatesGroup):
    waiting_for_first_question = State()
    waiting_for_additional_info = State()
    in_support_dialog = State()

callback_router = Router()

# ID —á–∞—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
SUPPORT_TICKETS_CHAT_ID = -4961897884

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏
# {user_id: {'support_user_id': int, 'chat_id': int, 'ticket_id': str}}
active_dialogs = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ {user_id: last_message_time}
file_upload_cooldown = {}

# –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
QUICK_RESPONSES = {
    "first": """ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! 

–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë —Å–µ–π—á–∞—Å.""",
    
    "second": """‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

‚è∞ –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è."""
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
@callback_router.callback_query(lambda c: c.data == "support")
async def support_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="open_main")]
        ])
    )
    await state.set_state(SupportState.waiting_for_first_question)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
@callback_router.message(F.text == "‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def support_start_text(message: Message, state: FSMContext):
    await message.answer(
        "üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="open_main")]
        ])
    )
    await state.set_state(SupportState.waiting_for_first_question)

# –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
@callback_router.message(SupportState.waiting_for_first_question)
async def handle_first_question(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
    if not await check_file_upload_cooldown(message, bot):
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞
        ticket_id = f"T{datetime.now().strftime('%y%m%d%H%M%S')}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        user_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username or '–±–µ–∑_username',
            'first_name': message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'ticket_id': ticket_id,
            'created_at': datetime.now()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        ticket_text = f"""üé´ <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data['username']} (ID: {user_data['user_id']})
üìÖ –í—Ä–µ–º—è: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}

<b>–í–æ–ø—Ä–æ—Å:</b>"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞
        await bot.send_message(SUPPORT_TICKETS_CHAT_ID, ticket_text, parse_mode="HTML")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
        support_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üí¨ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞", 
                callback_data=f"create_dialog_{message.from_user.id}_{ticket_id}"
            )]
        ])
        
        await bot.send_message(
            SUPPORT_TICKETS_CHAT_ID,
            f"üìã –¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω",
            reply_markup=support_keyboard
        )
        
        # –ü–µ—Ä–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(QUICK_RESPONSES["first"])
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await state.set_state(SupportState.waiting_for_additional_info)
        await state.update_data(ticket_id=ticket_id, user_data=user_data)
        
        logging.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
@callback_router.message(SupportState.waiting_for_additional_info)
async def handle_additional_info(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
    if not await check_file_upload_cooldown(message, bot):
        return
    
    try:
        state_data = await state.get_data()
        ticket_id = state_data.get('ticket_id', 'Unknown')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Ç–∏–∫–µ—Ç—É
        additional_text = f"""üìé <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫ —Ç–∏–∫–µ—Ç—É #{ticket_id}:</b>
üë§ –û—Ç: @{message.from_user.username or '–±–µ–∑_username'} (ID: {message.from_user.id})"""
        
        await bot.send_message(SUPPORT_TICKETS_CHAT_ID, additional_text, parse_mode="HTML")
        await message.copy_to(chat_id=SUPPORT_TICKETS_CHAT_ID)
        
        # –í—Ç–æ—Ä–æ–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(QUICK_RESPONSES["second"])
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await state.clear()
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
@callback_router.callback_query(lambda c: c.data.startswith("create_dialog_"))
async def create_support_dialog_chat(callback: CallbackQuery, bot: Bot):
    try:
        parts = callback.data.split("_")
        user_id = int(parts[2])
        ticket_id = parts[3] if len(parts) > 3 else "Unknown"
        support_user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        chat_title = f"–î–∏–∞–ª–æ–≥ #{ticket_id} - {callback.from_user.first_name}"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø)
            new_chat = await bot.create_group_chat(
                title=chat_title,
                user_ids=[support_user_id]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            )
            dialog_chat_id = new_chat.id
            
        except Exception as create_error:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –º–µ—Ç–æ–¥
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É: {create_error}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            instruction_msg = await bot.send_message(
                support_user_id,
                f"üí¨ <b>–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
                f"üé´ –¢–∏–∫–µ—Ç: #{ticket_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n\n"
                f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                f"‚Ä¢ –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞\n"
                f"‚Ä¢ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: <code>/end_{user_id}</code>\n\n"
                f"üîÑ –î–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="HTML"
            )
            
            dialog_chat_id = support_user_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
        active_dialogs[user_id] = {
            'support_user_id': support_user_id,
            'chat_id': dialog_chat_id,
            'ticket_id': ticket_id,
            'created_at': datetime.now()
        }
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"‚úÖ –î–∏–∞–ª–æ–≥ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id} —Å–æ–∑–¥–∞–Ω!\n"
            f"üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {callback.from_user.first_name}\n"
            f"üí¨ –ß–∞—Ç ID: {dialog_chat_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", 
                    callback_data=f"end_dialog_{user_id}"
                )]
            ])
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"üë®‚Äçüíº –° –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n"
            f"üé´ –¢–∏–∫–µ—Ç: #{ticket_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        await callback.answer("–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω!")
        logging.info(f"–°–æ–∑–¥–∞–Ω –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {support_user_id} <-> {user_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@callback_router.message()
async def handle_support_messages(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        support_user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_id = None
        dialog_info = None
        
        for uid, info in active_dialogs.items():
            if (info['support_user_id'] == support_user_id and 
                info['chat_id'] == chat_id):
                user_id = uid
                dialog_info = info
                break
        
        if not user_id:
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            if message.text and message.text.startswith("/end_"):
                try:
                    end_user_id = int(message.text.split("_")[1])
                    if end_user_id in active_dialogs:
                        await end_dialog(end_user_id, bot, message)
                        return
                except (ValueError, IndexError):
                    pass
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if message.text and message.text == f"/end_{user_id}":
            await end_dialog(user_id, bot, message)
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.copy_to(chat_id=user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        await bot.send_message(
            chat_id,
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
            reply_to_message_id=message.message_id
        )
        
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {support_user_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
@callback_router.message(lambda message: message.from_user.id in active_dialogs.keys())
async def handle_user_dialog_messages(message: Message, bot: Bot):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç –¥–∏–∞–ª–æ–≥–∞"""
    try:
        user_id = message.from_user.id
        dialog_info = active_dialogs[user_id]
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–∏–∞–ª–æ–≥–∞
        await message.copy_to(chat_id=dialog_info['chat_id'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await bot.send_message(
            dialog_info['chat_id'],
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{message.from_user.username or '–±–µ–∑_username'})\n"
            f"üé´ –¢–∏–∫–µ—Ç: #{dialog_info['ticket_id']}"
        )
        
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –¥–∏–∞–ª–æ–≥ {dialog_info['chat_id']}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
async def end_dialog(user_id: int, bot: Bot, message: Message = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
    try:
        if user_id not in active_dialogs:
            if message:
                await message.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        dialog_info = active_dialogs[user_id]
        ticket_id = dialog_info['ticket_id']
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        del active_dialogs[user_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        await bot.send_message(
            dialog_info['chat_id'],
            f"‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüé´ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"üë®‚Äçüíº –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\nüé´ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
        await bot.send_message(
            SUPPORT_TICKETS_CHAT_ID,
            f"‚úÖ –î–∏–∞–ª–æ–≥ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω"
        )
        
        logging.info(f"–î–∏–∞–ª–æ–≥ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
@callback_router.callback_query(lambda c: c.data.startswith("end_dialog_"))
async def end_dialog_callback(callback: CallbackQuery, bot: Bot):
    try:
        user_id = int(callback.data.split("_")[2])
        await end_dialog(user_id, bot)
        await callback.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
async def check_file_upload_cooldown(message: Message, bot: Bot, cooldown_seconds: int = 3) -> bool:
    """–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id
    current_time = asyncio.get_event_loop().time()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if not (message.photo or message.document or message.video or message.audio or message.voice):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if user_id in file_upload_cooldown:
        time_since_last = current_time - file_upload_cooldown[user_id]
        if time_since_last < cooldown_seconds:
            logging.info(f"–ö—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_upload_cooldown[user_id] = current_time
    return True

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è)
@callback_router.message(lambda message: message.text == "/end_all_dialogs")
async def end_all_dialogs(message: Message, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        count = len(active_dialogs)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
        for user_id in list(active_dialogs.keys()):
            await end_dialog(user_id, bot)
        
        await message.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        logging.info(f"–í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")