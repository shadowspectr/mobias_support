from aiogram import Router, types
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import requests
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
import re

# ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
PARTNER_CHAT_ID =-1002837608854  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
LOGGING_CHAT_ID = 521620770  # –ù–æ–≤—ã–π ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
YANDEX_API_KEY = "7df099aa-c180-4c44-b0cd-258a05bdc8f2"
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
partner_router = Router()

region_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–ù–†", callback_data="region_dnr")],
    [InlineKeyboardButton(text="–õ–ù–†", callback_data="region_lnr")],
    [InlineKeyboardButton(text="–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="region_kherson")],
    [InlineKeyboardButton(text="–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="region_zaporozh")],
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
skip_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photos")]
    ]
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PartnerApplicationState(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_region = State()
    waiting_for_address = State()
    waiting_for_photos = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
def get_partner_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?"
@partner_router.callback_query(lambda c: c.data == "partner_info")
async def partner_info(callback: types.CallbackQuery):
    info_text = (
        "–ö–æ–º–ø–∞–Ω–∏—è +7–î–æ—Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å–µ—Ç—å –ü—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö –∏ –≤ –ö—Ä—ã–º—É.\n\n"
        "–ú—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—Å –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –µ—Å–ª–∏:\n"
        "- –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é\n"
        "- –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—à –±—Ä–µ–Ω–¥–±—É–∫ –¥–ª—è –±–æ–ª—å—à–µ–π —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ –≤ –≥–æ—Ä–æ–¥–µ\n"
        "- –ò–º–µ–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –ü—É–Ω–∫—Ç–∞ –í—ã–¥–∞—á–∏\n"
        "- –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –Ω–∞–º–∏\n\n"
        "–ù–∞—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –æ—Ç 30 –∫–≤. –º\n"
        "- –ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂, —É–¥–æ–±–Ω—ã–π –∑–∞—Ö–æ–¥\n"
        "- –ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ —Å –ü–ö, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å—Ç–µ–ª–ª–∞–∂–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞ –ø–æ—Å—ã–ª–æ–∫\n"
        "- –ê–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ\n"
        "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –≤ —á–∏—Å—Ç–æ—Ç–µ –∏ –ø–æ—Ä—è–¥–∫–µ\n\n"
        "–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\" –Ω–∏–∂–µ."
    )
    await callback.message.answer(info_text, reply_markup=get_partner_keyboard(), parse_mode="HTML")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
    logging.info(f"User {callback.from_user.id} clicked on the '–ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?' button.")
    await callback.bot.send_message(LOGGING_CHAT_ID,f"User {callback.from_user.id} clicked on the '–ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?' button.")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
def find_address_on_yandex(address):
    url = "https://geocode-maps.yandex.ru/1.x/"
    params = {"apikey": YANDEX_API_KEY, "geocode": address, "format": "json"}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        try:
            geo_object = response.json()['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']
            address_found = geo_object['metaDataProperty']['GeocoderMetaData']['text']
            coordinates = geo_object['Point']['pos']
            lon, lat = coordinates.split()
            map_link = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16"
            return address_found, map_link
        except (IndexError, KeyError):
            return None, None
    return None, None

# –°—Ç–∞—Ä—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
@partner_router.callback_query(F.data == "submit_application")
async def start_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
    await state.set_state(PartnerApplicationState.waiting_for_full_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û
@partner_router.message(StateFilter(PartnerApplicationState.waiting_for_full_name))
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await state.set_state(PartnerApplicationState.waiting_for_phone)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@partner_router.message(StateFilter(PartnerApplicationState.waiting_for_phone))
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_keyboard)
    await state.set_state(PartnerApplicationState.waiting_for_region)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
@partner_router.callback_query(StateFilter(PartnerApplicationState.waiting_for_region))
async def get_region(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_")[1]
    await state.update_data(region=region)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è.")
    await state.set_state(PartnerApplicationState.waiting_for_address)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@partner_router.message(StateFilter(PartnerApplicationState.waiting_for_address))
async def get_address(message: Message, state: FSMContext):
    user_data = await state.get_data()
    full_address = f"{user_data.get('region', '')}, {message.text}"

    address_found, map_link = find_address_on_yandex(full_address)
    if address_found:
        await state.update_data(address=message.text, address_found=address_found, map_link=map_link)
    else:
        await state.update_data(address=message.text, address_found="–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", map_link="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    await message.answer(
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø–æ–º–µ—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ñ–∞—Å–∞–¥). –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=skip_keyboard
    )
    await state.set_state(PartnerApplicationState.waiting_for_photos)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
@partner_router.message(StateFilter(PartnerApplicationState.waiting_for_photos),
                        F.content_type.in_({"photo", "video", "text"}))
async def finalize_application(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    region = user_data.get("region")
    address_input = user_data.get("address")
    address_found = user_data.get("address_found", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    map_link = user_data.get("map_link", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    media_group = []
    if message.photo:
        media_group.append(InputMediaPhoto(media=message.photo[-1].file_id, caption="–§–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è"))
    elif message.video:
        media_group.append(InputMediaVideo(media=message.video.file_id, caption="–í–∏–¥–µ–æ –ø–æ–º–µ—â–µ–Ω–∏—è"))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {user_data['full_name']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}\n"
        f"üìç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address_input}\n"
        f"üó∫Ô∏è <b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</b> {address_found}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É:</b> <a href='{map_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
        f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await bot.send_message(PARTNER_CHAT_ID, support_message, parse_mode="HTML")
    if media_group:
        await bot.send_media_group(PARTNER_CHAT_ID, media_group)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –Ω–∏–º –∏ –≤ —Å–ª—É—á–∞–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@partner_router.callback_query(lambda c: c.data == "skip_photos")
async def skip_photos(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    region = user_data.get("region")
    address_input = user_data.get("address")
    address_found = user_data.get("address_found", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    map_link = user_data.get("map_link", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    user_id = callback.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {user_data['full_name']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}\n"
        f"üìç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address_input}\n"
        f"üó∫Ô∏è <b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</b> {address_found}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É:</b> <a href='{map_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
        f"üñºÔ∏è <b>–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:</b> <i>–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</i>\n"
        f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await bot.send_message(PARTNER_CHAT_ID, support_message, parse_mode="HTML")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –Ω–∏–º –∏ –≤ —Å–ª—É—á–∞–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è."
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@partner_router.message()
async def forward_partner_response(message: Message, bot: Bot):
    if message.chat.id == PARTNER_CHAT_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if not message.reply_to_message:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
            return

        # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        match = re.search(r"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (\d+)", message.reply_to_message.text)
        if not match:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
            return

        user_id = int(match.group(1))  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id, f"üì© <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É:</b>\n\n{message.text}", parse_mode="HTML"
            )
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

